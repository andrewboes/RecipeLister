@{
	Layout = null;
}

<!DOCTYPE html>

<html>
<head>
	<meta name="viewport" content="width=device-width" />
	<title>TouchSort</title>
</head>
<body>
	<div>
		@*<div class="draggable" style="position: absolute; width: 200px; height: 200px; background: #f00;"></div>
		<div class="draggable" style="position: absolute; width: 50px; height: 50px; background: #f00;"></div>*@
		<div id="console">
			@*<div>Console here, waiting for info</div>*@
		</div>
		<ul class="draggable">
			<li>Item 1</li>
			<li>Item 2</li>
			<li>Item 3</li>
			<li>Item 4</li>
			<li>Item 4</li>
			<li>Item 5</li>
			<li>Item 6</li>
			<li>Item 7</li>
			<li>Item 8</li>
			<li>Item 9</li>
			<li>Item 10</li>
			<li>Item 11</li>
			<li>Item 12</li>
			<li>Item 13</li>
			<li>Item 14</li>
			<li>Item 15</li>
			<li>Item 16</li>
			<li>Item 17</li>
			<li>Item 18</li>
			<li>Item 19</li>
			<li>Item 20</li>
			<li>Item 21</li>
			<li>Item 22</li>
			<li>Item 23</li>
			<li>Item 24</li>
			<li>Item 25</li>
			<li>Item 26</li>
			<li>Item 27</li>
			<li>Item 28</li>
			<li>Item 29</li>
			<li>Item 30</li>
			<li>Item 32</li>
			<li>Item 33</li>
			<li>Item 34</li>
			<li>Item 35</li>
			<li>Item 36</li>
			<li>Item 37</li>
			<li>Item 38</li>
			<li>Item 39</li>
			<li>Item 40</li>
		</ul>
		@*<ul>
			<li class="draggable" style="position: absolute;">
				<div style="position: absolute; width: 50px; height: 50px; background: #f00;"></div>
			</li>
		</ul>*@
		<div>
		</div>


		@*<ul id="sortable">
			<li>Item 1</li>
				<li>Item 2</li>
				<li>Item 3</li>
				<li>Item 4</li>
				<li>Item 4</li>
				<li>Item 5</li>
				<li>Item 6</li>
				<li>Item 7</li>
				<li>Item 8</li>
				<li>Item 9</li>
				<li>Item 10</li>
				<li>Item 11</li>
				<li>Item 12</li>
				<li>Item 13</li>
				<li>Item 14</li>
				<li>Item 15</li>
				<li>Item 16</li>
				<li>Item 17</li>
				<li>Item 18</li>
				<li>Item 19</li>
		</ul>*@
		@*<h2>Sortable List With Handles</h2>
		<ul id="sortable-with-handles" class="sortable list">
			<li><span class="handle">::</span> Item 1</li>
			<li><span class="handle">::</span> Item 2</li>
			<li><span class="handle">::</span> Item 3</li>
			<li><span class="handle">::</span> Item 4</li>
			<li><span class="handle">::</span> Item 5</li>
			<li><span class="handle">::</span> Item 6</li>
		</ul>*@

		@*<div class="draggable" style="position:absolute; top:50px; left:20; width:200px; height:200px; background:#f00;"></div>
        <div class="draggable" style="position:absolute; top:50px; left:20; width:50px; height:50px; background:#f00;"></div>
        
        <div>
            <button id="enable">Enable</button>
            <button id="disable">Disable</button>
        </div>*@

	</div>
</body>
<script src="http://code.jquery.com/jquery-2.0.3.min.js"></script>
<script>
	(function ($) {
		var dragging;
		var placeholders = $();
		$.fn.draggableTouch = function (action) {

			// check if the device has touch support, and if not, fallback to use mouse
			// draggableMouse which uses mouse events
			if (!("ontouchstart" in document.documentElement)) {
				return this.draggableMouse(action);
			}
			// check if we shall make it not draggable
			if (action == "disable") {
				this.unbind("mousedown");
				this.unbind("mouseup");
				return this;
			}
			this.each(function () {

				/*********************************/


				var ulElement = this;
				var placeholder = $('<' + (/^ul|ol$/i.test(this.tagName) ? 'li' : 'div') + ' class="sortable-placeholder">');
				var lastY = null;

				var move = function (x, y) {
					if (elementToMove) {
						elementToMove.style.position = "absolute";
						elementToMove.style.left = x + "px";
						elementToMove.style.top = y + "px";
						lastY = y;
					}
				};

				$(this).delegate('li', 'touchend', function (event) {
					if (!lastY)
						return;
					var v = $(this);
					var u = "<li>" + v.text() + "</li>";
					v.remove();
					var newY = lastY;

					var myChildren = $(ulElement).children();
					var inserted = false;
					for (var i = 0; i < myChildren.length; i++) {
						var myChild = myChildren[i];
						if (newY < $(myChild).offset().top) {
							$(u).insertBefore($(myChild));
							inserted = true;
							break;
						}
					}
					if (!inserted) {
						$(u).insertAfter($(ulElement).children().last());
					}
					lastY = null;
					placeholder.remove();
				});

				$(this).delegate('li', 'touchstart', function () {
					event.preventDefault();
					elementToMove = this;
					$(placeholder).insertAfter(elementToMove);
				});

				$(this).delegate('li', 'touchmove', function () {
					var x = event.targetTouches[0].pageX;
					var y = event.targetTouches[0].pageY;
					move(x, y);
				});
			});
			return this;
		};

		/**
     * Draggable fallback for when touch is not available
     */
		$.fn.draggableMouse = function (action) {
			// check if we shall make it not draggable
			if (action == "disable") {
				this.unbind("mousedown");
				this.unbind("mouseup");
				return this;
			}
			this.each(function () {
				var elementToMove = null;
				var ulElement = this;
				var index = null;
				var placeholder = $('<' + (/^ul|ol$/i.test(this.tagName) ? 'li' : 'div') + ' class="sortable-placeholder">');
				placeholders = placeholders.add(placeholder);

				var move = function (x, y) {
					if (elementToMove) {
						elementToMove.style.position = "absolute";
						elementToMove.style.left = x + "px";
						elementToMove.style.top = y + "px";
						$(placeholder).insertAfter(elementToMove);
					}
				};

				$(this).delegate('li', 'mouseup', function (event) {
					var v = $(this);
					var u = "<li>" + v.text() + "</li>";
					v.remove();
					//$(ulElement).children().each(function (x) {
					//	console.log($(this).offset().top);
					//});
					var newY = event.pageY;
					var myChildren = $(ulElement).children();
					var inserted = false;
					for (var i = 0; i < myChildren.length; i++) {
						var myChild = myChildren[i];
						if (newY < $(myChild).offset().top) {
							$(u).insertBefore($(myChild));
							inserted = true;
							break;
						}
					}
					if (!inserted) {
						$(u).insertAfter($(ulElement).children().last());
					}
					placeholder.remove();
					index = null;
				});

				$(this).delegate('li', 'mousedown', function (e) {
					index = (dragging = $(this)).addClass('sortable-dragging').index();
					event.preventDefault();
					elementToMove = this;
				});

				document.onmousemove = function (e) {
					move(e.pageX, e.pageY);
				};

				document.onmouseup = function (e) {
					elementToMove = null;
				};
			});
			return this;
		};
	})(jQuery);

	$(document).ready(function () {
		$(".draggable").draggableTouch();

		//$(".draggable").bind("dragstart", function (e, pos) {
		//	console.log("dragstart:", this, pos.left + "," + pos.top);
		//}).bind("dragend", function (e, pos) {
		//	console.log("dragend:", this, pos.left + "," + pos.top);
		//});
	});

	//if this is a touch device, we assume we don't have a visible console and use
	//a crappy homemade one :)
	if ("ontouchstart" in document.documentElement) {
		window.console = {
			log: function (a, b, c) {
				if (a && b && c)
					$("<div>" + a + " " + b + " " + c + "</div>").appendTo($("#console"));
				else if (a && b)
					$("<div>" + a + " " + b + "</div>").appendTo($("#console"));
				else if (a)
					$("<div>" + a + "</div>").appendTo($("#console"));
			}
		};
	}
</script>
</html>
