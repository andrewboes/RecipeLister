@{
	ViewBag.Title = "TouchTest";
	Layout = null;
}

<html>
	<head>
		<title></title>
		<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
	</head>
	<body>
		<div id="myTouchDiv" style="background-color: cyan; width: 200px; height: 300px; position: absolute">
			<div id="actionType"></div>
			x: <span id="ex"></span>; y:<span id="why"></span>; <span id="dragObj"></span>;
		</div>
		<div id="myEventViewer">
		</div>
	</body>
</html>
<script src="http://code.jquery.com/jquery-2.0.3.min.js"></script>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css">

<!-- Optional theme -->
<link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-theme.min.css">

<!-- Latest compiled and minified JavaScript -->
<script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js"></script>

<script>
	var dragObj = null;
	$(document).ready(function () {

		$("#myTouchDiv").on('click', function (event) {
			showalert("click", event.pageX, event.pageY);
		});
		
		$("#myTouchDiv").on('mousedown', function (event) {
			dragObj = this;
			showalert("mousedown", event.pageX, event.pageY);
		});
		
		$("#myTouchDiv").on('mouseup', function (event) {
			showalert("mouse up", event.pageX, event.pageY);
		});
		

		var obj = document.getElementById('myTouchDiv');
		obj.addEventListener('touchmove', function (event) {
			showalert("touchmove " + event.targetTouches.length, event.targetTouches[0].pageX, event.targetTouches[0].pageY);
			event.preventDefault();
			var x = event.targetTouches[0].pageX;
			var y = event.targetTouches[0].pageY;
			moveIt(x, y);
		}, false);

		obj.addEventListener('touchstart', function (event) {
			showalert("touchstart " + event.targetTouches.length, event.targetTouches[0].pageX, event.targetTouches[0].pageY);
			event.preventDefault();
			dragObj = this;
		}, false);
		
		obj.addEventListener('touchend', function (event) {
			showalert("touchend " + event.targetTouches.length, event.targetTouches[0].pageX, event.targetTouches[0].pageY);
			event.preventDefault();
			dragObj = null;
		}, false);

		document.onmouseup = function (e) {
			dragObj = null;
		};

		document.onmousemove = function (e) {
			var x = e.pageX;
			var y = e.pageY;
			moveIt(x, y);
		};
	});
	
	function moveIt(x, y) {
		if (dragObj == null)
			return;

		dragObj.style.left = x + "px";
		dragObj.style.top = y + "px";
	}

	function showalert(message, x, y) {
		$('#actionType').empty().append(message);
		$('#ex').empty().append(x);
		$('#why').empty().append(y);
		if (dragObj == null) {
			$('#dragObj').empty().append('null');
			return;
		} else {
			$('#dragObj').empty().append('not null');
		}
	}
	
	(function ($) {
		var dragging, placeholders = $();
		$.fn.sortable = function (options) {
			var method = String(options);
			options = $.extend({
				connectWith: false
			}, options);
			return this.each(function () {
				if (/^enable|disable|destroy$/.test(method)) {
					var items = $(this).children($(this).data('items')).attr('draggable', method == 'enable');
					if (method == 'destroy') {
						items.add(this).removeData('connectWith items')
										.off('dragstart.h5s dragend.h5s selectstart.h5s dragover.h5s dragenter.h5s drop.h5s');
					}
					return;
				}
				var isHandle, index, items = $(this).children(options.items);
				var placeholder = $('<' + (/^ul|ol$/i.test(this.tagName) ? 'li' : 'div') + ' class="sortable-placeholder">');
				items.find(options.handle).mousedown(function () {
					isHandle = true;
				}).mouseup(function () {
					isHandle = false;
				});
				$(this).data('items', options.items)
				placeholders = placeholders.add(placeholder);
				if (options.connectWith) {
					$(options.connectWith).add(this).data('connectWith', options.connectWith);
				}
				items.attr('draggable', 'true').on('dragstart.h5s', function (e) {
					if (options.handle && !isHandle) {
						return false;
					}
					isHandle = false;
					var dt = e.originalEvent.dataTransfer;
					dt.effectAllowed = 'move';
					dt.setData('Text', 'dummy');
					index = (dragging = $(this)).addClass('sortable-dragging').index();
				}).on('dragend.h5s', function () {
					if (!dragging) {
						return;
					}
					dragging.removeClass('sortable-dragging').show();
					placeholders.detach();
					if (index != dragging.index()) {
						dragging.parent().trigger('sortupdate', { item: dragging });
					}
					dragging = null;
				}).not('a[href], img').on('selectstart.h5s', function () {
					this.dragDrop && this.dragDrop();
					return false;
				}).end().add([this, placeholder]).on('dragover.h5s dragenter.h5s drop.h5s', function (e) {
					if (!items.is(dragging) && options.connectWith !== $(dragging).parent().data('connectWith')) {
						return true;
					}
					if (e.type == 'drop') {
						e.stopPropagation();
						placeholders.filter(':visible').after(dragging);
						dragging.trigger('dragend.h5s');
						return false;
					}
					e.preventDefault();
					e.originalEvent.dataTransfer.dropEffect = 'move';
					if (items.is(this)) {
						if (options.forcePlaceholderSize) {
							placeholder.height(dragging.outerHeight());
						}
						dragging.hide();
						$(this)[placeholder.index() < $(this).index() ? 'after' : 'before'](placeholder);
						placeholders.not(placeholder).detach();
					} else if (!placeholders.is(this) && !$(this).children(options.items).length) {
						placeholders.detach();
						$(this).append(placeholder);
					}
					return false;
				});
			});
		};
	})(jQuery);
</script>

